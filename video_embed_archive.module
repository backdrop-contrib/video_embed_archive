<?php
/**
 * @file
 * Adding an Archive.org videos handler to Video Embed Field.
 *
 * @see video_embed_field.api.php for more documentation
 */
 
 function video_embed_archive_video_embed_handler_info() {
  $handlers = array();
  $handlers['archive'] = array(
    'title' => 'Archive Video',
    'function' => 'video_embed_archive_handle_video',
    //'thumbnail_function' => 'video_embed_dailymotion_handle_thumbnail',
    'form' => 'video_embed_archive_form',
    'domains' => array(
      'archive.org',
    ),
  // Defaults are the defaults to provide to your form.
    'defaults' => array(
      'width' => '640',
      'height' => '480',
    ),
  );
  return $handlers;
}

/**
 * Implements hook_theme().
 *
 * Using video_embed_archive.tpl.php as template.
 */
function video_embed_archive_theme() {
  return array(
    'video_embed_archive' => array(
      'template' => 'video_embed_archive',
      'arguments' => array(
        'url' => NULL,
        'width' => NULL,
        'height' => NULL,
      ),
    ),
  );
}

/**
 * Configuration form (the callback for the form key in info).
 *
 * Provide a form to configure out video settings.
 */
function video_embed_archive_form($defaults) {
  $form = array();
  // Element for width.
  $form['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Player Width'),
    '#description' => t('The width of the player.'),
    '#default_value' => $defaults['width'],
    '#element_validate' => array('element_validate_integer_positive'),
  );
  // Form element for the height of the player -
  // note we're using the default from defaults.
  $form['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Player Height'),
    '#description' => t('The height of the player.'),
    '#default_value' => $defaults['height'],
    '#element_validate' => array('element_validate_integer_positive'),
  );

  return $form;
}

/**
 * This is the video handler (the 'function' key from handler_info).
 *
 * Function handles url and returns embed video html code.
 *
 * @param string $url
 *   This is string witch user input into video field.
 * @param array $settings
 *   Settings which were defined by admin.
 *
 * @return mixed
 *   Return rendered html code or empty string if fails to get id from url.
 */
function video_embed_archive_handle_video($url, array $settings) {
  $output = '';
  $archive_video_id = _video_embed_archive_get_video_id($url);

  if ($archive_video_id) {
    // Embed code.
    $embed = theme('video_embed_archive', array(
        'url' => '' . $archive_video_id . '',
        'width' => $settings['width'],
        'height' => $settings['height'],
      )
    );
    // Return a render array.
    $video = array(
      '#markup' => $embed,
    );
    $output = $video;
  }
  else {
    drupal_set_message(t('Error with getting id of the video.'), 'error');
  }
  // Just return an empty string if there is no id
  // so we don't have broken embeds showing up.
  return $output;
}

/**
 * Helper function to take an archive video url and return its id.
 *
 * @param string $url
 *   This is string witch user input into video field.
 *
 * @return string|bool
 *   Return FALSE if fails to get id using regexp on user input string.
 */
function _video_embed_archive_get_video_id($url) {
  $output = FALSE;
  $url = check_plain($url);
  // Parse_url is an easy way to break a url into its components.
  $matches = array();
  $url = preg_replace('/\?.*/', '', $url);
  // Grab id of archive_video to get thumbnail for it and construct proper
  // iframe.
  preg_match('/archive\.org\/details\/(.*)[\/]?/', $url, $matches);

  if ($matches && !empty($matches[1])) {
    // If url was with '/' symbol, clear it.
    $output = rtrim($matches[1], '/');
  }
  return $output;
}

/**
 * Implements hook_preprocess_hook().
 */
function video_embed_archive_preprocess_video_embed_archive(&$variables) {
  if (!empty($variables['width'])) {
    $variables['width'] = check_plain($variables['width']);
  }

  if (!empty($variables['height'])) {
    $variables['height'] = check_plain($variables['height']);
  }
}